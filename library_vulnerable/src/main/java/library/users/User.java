package library.users;

import com.sun.istack.NotNull;
import library.book.Book;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

import javax.persistence.*;

@Entity
@Table(name = "USER",
        uniqueConstraints = @UniqueConstraint(columnNames = "USER_NAME"))
public class User {

    private @Id @GeneratedValue @Column(name = "USER_ID") Integer user_id;
    private @NotNull String user_name;
    private @NotNull String password;
    private @NotNull String role;
    private Float balance; //Saldo disonibile sull'account

    @ManyToMany(fetch = FetchType.LAZY, cascade = CascadeType.PERSIST)
    @JoinTable(name = "USER_BOOK",
    joinColumns = {@JoinColumn(name = "user_id")},
    inverseJoinColumns = {@JoinColumn(name = "book_id")})
    private List<Book> rentedBooks = new ArrayList<>(); //Lista contenente gli isbn dei libri noleggiati


    public User() {}

    public User(String user_name, String password, String role, Float balance) {
        this.user_name = user_name;
        this.password = password;
        this.role = role;
        this.balance = balance;
    }

    public Integer getId() {
        return user_id;
    }

    public void setId(Integer id) {
        this.user_id = id;
    }

    public String getUserName() {
        return user_name;
    }

    public void setUserName(String user_name) {
        this.user_name = user_name;
    }

    public String getPassword() {
        return password;
    }

    public void setPassword(String password) {
        this.password = password;
    }

    public String getRole() {
        return role;
    }

    public void setRole(String role) {
        this.role = role;
    }

    public List<Book> getRentedBook() {
        return rentedBooks;
    }

    public void setRentedBook(List<Book> rentedBooks) {
        this.rentedBooks = rentedBooks;
    }

    public Float getBalance() {
        return balance;
    }

    public void setBalance(Float balance) {
        this.balance = balance;
    }

    @Override
    public boolean equals(Object o) {

        if (!(o instanceof User))
            return false;
        User user = (User) o;
        return user_name.equals(user.user_name)
                && password.equals(user.password) && role.equals(user.role);
    }

    @Override
    public int hashCode() {
        return Objects.hash(this.user_name, this.password, this.role);
    }

    @Override
    public String toString() {
        return "User [user_name=" + user_name + ", password=" + password + ", role=" + role + "]";
    }



}
