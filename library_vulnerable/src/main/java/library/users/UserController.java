package library.users;

import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

import library.book.Book;
import library.book.BookModelAssembler;
import library.book.BookRepository;
import org.springframework.hateoas.CollectionModel;
import org.springframework.hateoas.EntityModel;
import org.springframework.hateoas.IanaLinkRelations;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import static org.springframework.hateoas.server.mvc.WebMvcLinkBuilder.*;

@RestController
class UserController {

    private final BookModelAssembler book_assembler;
    private final UserRepository repository;
    private final UserModelAssembler assembler;

    UserController(BookModelAssembler book_assembler, UserRepository repository, UserModelAssembler assembler) {
        this.book_assembler = book_assembler;
        this.repository = repository;
        this.assembler = assembler;
    }

    //Mostro solo le informazioni relative agli id, nome_utente e saldo disponibile
    @GetMapping("/users")
    CollectionModel<EntityModel<User>> getAllUsers() {

        List<User> users = repository.findAll(); //Prendo tutti gli utenti
        List<User> users_list = new ArrayList<>(); //Lista di utenti contenenti solo le informazioni utili

        for(User user: users){
            User tmp_user = new User();
            tmp_user.setId(user.getId());
            tmp_user.setUserName(user.getUserName());
            tmp_user.setRole(user.getRole());
            tmp_user.setBalance(user.getBalance());
            tmp_user.setPassword(user.getPassword());
            users_list.add(tmp_user);
        }

        List<EntityModel<User>> list_entity = users_list.stream() //
                .map(assembler::toModel) //
                .collect(Collectors.toList());

        return CollectionModel.of(list_entity, linkTo(methodOn(UserController.class).getAllUsers()).withSelfRel());
    }

    //Per aggiungere un nuovo utente
    @PostMapping("/users")
    ResponseEntity<?> newUser(@RequestBody User newUser) {

        EntityModel<User> entityModel = assembler.toModel(repository.save(newUser));

        return ResponseEntity // viene utilizzato per creare un messaggio di HTTP 201 created.
                .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
                .body(entityModel);
    }

    //Per ritornare un singolo utente
    @GetMapping("/users/{id}")
    EntityModel<User> getUser(@PathVariable Integer id) {

        User user = repository.findById(id) //
                .orElseThrow(() -> new UserNotFoundException(id));

        User user_tmp = new User(); //Creo un nuovo utente temporaneo
        user_tmp.setId(user.getId());
        user_tmp.setPassword(user.getPassword());
        user_tmp.setUserName(user.getUserName());
        user_tmp.setRole(user.getRole());
        user_tmp.setBalance(user.getBalance());

        return assembler.toModel(user_tmp);
    }

    //Per ritornare i libri di un determinato utente
    @GetMapping("/users/{id}/books")
    CollectionModel<EntityModel<Book>> getUserBooks(@PathVariable Integer id) {

        User user = repository.findById(id) //
                .orElseThrow(() -> new UserNotFoundException(id));

        List<Book> user_books_list = new ArrayList<>();

        for (Book book:user.getRentedBook()) { //Estraggo i libri dell'utente mostrando solo le informazioni principali del libro
            Book tmp_book = new Book();
            tmp_book.setISBN(book.getISBN());
            tmp_book.setPublicationYear(book.getPublicationYear());
            tmp_book.setTitle(book.getTitle());
            tmp_book.setAuthor(book.getAuthor());
            tmp_book.setGenere(book.getGenere());
            tmp_book.setId(book.getId());
            tmp_book.setAvaiableCopies(book.getAvaiableCopies());
            tmp_book.setPrice(book.getPrice());
            user_books_list.add(tmp_book); //Aggiungo il libro a user_books_list
        }

        List<EntityModel<Book>> books = user_books_list.stream() //
                .map(book_assembler::toModel) //
                .collect(Collectors.toList());

        return CollectionModel.of(books, linkTo(methodOn(UserController.class).getUserBooks(user.getId())).withRel("users_book"));
    }

    //Per modificare un utente
    @PutMapping("/users/{id}")
    ResponseEntity<?> replaceUser(@RequestBody User newUser, @PathVariable Integer id) {

        User updatedUser = repository.findById(id) //
                .map(user -> { //L'utente puÃ² modificare tutti i dati
                    user.setUserName(newUser.getUserName());
                    user.setPassword(newUser.getPassword());
                    user.setBalance(newUser.getBalance());
                    user.setRole(newUser.getRole());
                    user.setRentedBook(newUser.getRentedBook());
                    return repository.save(user);
                }) //
                .orElseGet(() -> {
                    newUser.setId(id);
                    return repository.save(newUser);
                });

        EntityModel<User> entityModel = assembler.toModel(updatedUser);

        return ResponseEntity //
                .created(entityModel.getRequiredLink(IanaLinkRelations.SELF).toUri()) //
                .body(entityModel);
    }

    @DeleteMapping("/users/{id}")
    void deleteUser(@PathVariable Integer id) {

        User user = repository.findById(id) //
                .orElseThrow(() -> new UserNotFoundException(id));

        for(Book book:user.getRentedBook()) //Rimuovo, prima di procedere alla delete, l'utente dalla lista degli utenti dei libri noleggiati
            book.getUsers().remove(user);

        repository.delete(user);
    }
}