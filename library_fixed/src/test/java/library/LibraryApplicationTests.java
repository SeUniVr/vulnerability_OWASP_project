package library;

import org.junit.jupiter.api.Test;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.web.server.LocalServerPort;

import java.util.ArrayList;
import java.util.List;

import static io.restassured.RestAssured.*;
import static org.hamcrest.Matchers.equalTo;

@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class LibraryApplicationTests {
	String newBook = "{\n" +
			"        \"isbn\":765439,\n" +
			"        \"title\": \"La fabbrica di cioccolato\",\n" +
			"        \"author\": \"Roald Dahl\",\n" +
			"        \"genere\": \"Romanzo\",\n" +
			"        \"publicationYear\": 1964,\n" +
			"        \"avaiableCopies\": 10,\n" +
			"        \"price\": 1.0\n" +
			"}";

	String newBook_modified = "{\n" +
			"        \"isbn\":765439,\n" +
			"        \"title\": \"La fabbrica di cioccolata\",\n" +
			"        \"author\": \"Roald Dahl\",\n" +
			"        \"genere\": \"Fumetto\",\n" +
			"        \"publicationYear\": 1964,\n" +
			"        \"avaiableCopies\": 10,\n" +
			"        \"price\": 1.0\n" +
			"}";

	String newBook_modified_by_attacker = "{\n" +
			"        \"isbn\":765439,\n" +
			"        \"title\": \"La fabbrica di cioccolata\",\n" +
			"        \"author\": \"Roald Dahl\",\n" +
			"        \"genere\": \"Fumetto\",\n" +
			"        \"publicationYear\": 1964,\n" +
			"        \"avaiableCopies\": 0,\n" +
			"        \"price\": 0.0\n" +
			"}";

	String newUser = "{\n" +
			"        \"userName\": \"Marco\",\n" +
			"        \"password\": \"ciao\",\n" +
			"        \"role\": \"ROLE_USER\",\n" +
			"        \"rentedBook\": [],\n" +
			"        \"balance\": 1.0\n" +
			"}";

	String newUser_modified = "{\n" +
			"        \"userName\": \"Marco\",\n" +
			"        \"password\": \"ciao\",\n" +
			"        \"role\": \"ROLE_ADMIN\",\n" +
			"        \"rentedBook\": [],\n" +
			"        \"balance\": 1000.0\n" +
			"}";

	String user_role_ADMIN_authentication_data = "{\n" +
			"        \"username\": \"Giorgio99\",\n" +
			"        \"password\": \"ciao\"\n" +
			"}";

	String user_role_USER_authentication_data = "{\n" +
			"        \"username\": \"Mattia99\",\n" +
			"        \"password\": \"12345\"\n" +
			"}";

	@LocalServerPort
	private int port;

	//I prossimi test riguarderanno le vulnerabilità dell'applicazione

	//Test sul funzionamento del generatore di token
	@Test
	public void test_get_token() {

		String token = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_USER_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		given().port(port).header("Authorization","Bearer " + token).when().
				get("/users/{id}",2).
				then().statusCode(200); //Mi aspetto che la get dei libri vada a buon fine

	}

	//Test sulla visualizzazione dei dati sensibili dell'utente, ossia la password e il ruolo
	@Test
	public void test_sensible_data_user() {

		String token = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_USER_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		given().port(port).header("Authorization","Bearer " + token).when().
				get("/users/{id}",2).
				then().statusCode(200).body("password",equalTo(null),
						"role", equalTo(null)); //Mi aspetto che non vengano visualizzati tali dati
	}

	//Test sulla creazione di un libro da parte di un utente con ruolo "USER"
	@Test
	public void test_post_new_book_by_USER() {

		String token = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_USER_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		given().port(port).header("Authorization","Bearer " + token).contentType("application/json").accept("application/json")
				.body(newBook).
				when().
				post("/books").
				then().statusCode(401); //Mi aspetto che venga ritornato l'errore 401 Unauthorized
	}

	//Test sulla creazione di un libro da parte di un utente con ruolo "ADMIN"
	@Test
	public void test_post_new_book_by_ADMIN() {

		String token = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_ADMIN_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		given().port(port).header("Authorization","Bearer " + token).contentType("application/json").accept("application/json")
				.body(newBook).
				when().
				post("/books").
				then().statusCode(201); //Mi aspetto che venga creato il libro
	}

	//Test sulla visualizzazione di tutti gli utenti da parte di un utente con ruolo "USER"
	@Test
	public void test_get_users_by_USER() {

		String token = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_USER_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		given().port(port).header("Authorization","Bearer " + token).when().
				get("/users").
				then().statusCode(403); //Mi aspetto che venga ritornato un errore di accesso non autorizzato
	}

	//Test sulla visualizzazione di tutti gli utenti da parte di un utente con ruolo "ADMIN"
	@Test
	public void test_get_users_by_ADMIN() {

		String token = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_ADMIN_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		given().port(port).header("Authorization","Bearer " + token).when().
				get("/users").
				then().statusCode(200); //Mi aspetto che non vengano visualizzati tali dati
	}

	//Test sulla modifica dei dati di un utente da parte di un utente con ruolo "USER" e un utente con ruolo "ADMIN"
	@Test
	public void test_put_new_data_user(){

		String token_user = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_USER_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		String token_admin = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_ADMIN_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		//Aggiungo un nuovo utente con un utente ADMIN
		given().port(port).header("Authorization","Bearer " + token_admin).contentType("application/json").accept("application/json")
				.body(newUser).
				when().
				post("/users").
				then().
				statusCode(201);

		//Modifico i dati dell'utente aggiunto con un utente USER
		given().port(port).header("Authorization","Bearer " + token_user).contentType("application/json").accept("application/json")
				.body(newUser_modified).
				when().
				put("/users/{id}",5).
				then().
				statusCode(201).body("role",equalTo("ROLE_USER"),
						"balance",equalTo(1.0F)); //Mi aspetto che non venga alterato ne il ruolo ne il saldo

		//Modifico i dati dell'utente aggiunto con un utente ADMIN
		given().port(port).header("Authorization","Bearer " + token_admin).contentType("application/json").accept("application/json")
				.body(newUser_modified).
				when().
				put("/users/{id}",5).
				then().
				statusCode(201).body("role",equalTo("ROLE_ADMIN"), //Mi aspetto che venga modificato il ruolo
						"balance",equalTo(1.0F)); //Mi aspetto che non venga alterato il saldo

	}

	//Test broken level authorization, per verificare che un attaccante possa accedere agli altri utenti, manipolando gli id
	@Test
	public void test_broken_level_authorization() {
		int count = 0; //Contatore degli account trovati

		String token = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_USER_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		for(int id = 0; id <= 10;id++){ //Controllo solo i primi 10 endpoints
			Integer statusCode = given().port(port).header("Authorization","Bearer " + token)
					.when().get("/users/{id}",id).getStatusCode();
			if(statusCode == 200) //Se lo status code è 200 significa che si ha accesso a quei dati
				count++;

		}

		if(count > 1) //Se si ha accesso a più profili
			System.out.println("TEST FALLITO perchè si ha accesso a " + count + " profili");
		else
			System.out.println("TEST RIUSCITO");
	}

	//Test sul numero di richieste accettate simultaneamente
	@Test
	public void test_concurrent_requests_with_threads(){
		final int NUMBER_OF_THREADS = 100;
		List<Request_thread> threads = new ArrayList<>(); //Creo una lista di thread

		String token = given().port(port).contentType("application/json").accept("application/json")
				.body(user_role_USER_authentication_data).
				when().
				post("/authenticate").
				then().extract().path("jwtToken"); //Ottengo un token di autenticazione

		for(int i = 0; i < NUMBER_OF_THREADS; i++){ //Istanzio i thread
			threads.add(new Request_thread(port,i,token));
		}

		for(Request_thread thread: threads) //Faccio partire i thread
			thread.start();

		given().port(port).when().get("/books");

	}
}
